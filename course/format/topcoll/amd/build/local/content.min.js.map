{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Collapsed Topics Course index main component.\n *\n * @module     format_topcoll/local/content\n * @class      format_topcoll/local/content\n * @copyright  2022 G J Barnard based upon work done by:\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Component from 'core_courseformat/local/content';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport TopcollDispatchActions from 'format_topcoll/local/content/actions';\nimport * as CourseEvents from 'core_course/events';\n\nexport default class TopcollComponent extends Component {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        super.create(descriptor);\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new TopcollComponent({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     */\n    stateReady() {\n        this._indexContents();\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new TopcollDispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document,\n            \"scroll\",\n            this._scrollHandler\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.stealth:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n            {watch: `cm.indent:updated`, handler: this._reloadCm},\n            {watch: `cm.groupmode:updated`, handler: this._reloadCm},\n            {watch: `cm.name:updated`, handler: this._refreshCmName},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            {watch: `section.title:updated`, handler: this._refreshSectionTitle},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Section visibility.\n            {watch: `section.visible:updated`, handler: this._reloadSection},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n        ];\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.state the full state object.\n     */\n    _refreshCourseSectionlist({state}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn !== null) {\n            return;\n        }\n        const sectionlist = this.reactive.getExporter().listedSectionIds(state);\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixTopcollSectionOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixTopcollSectionOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (!item) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            let itemno = this.getElement('#tcnoid-'+itemid);\n            if (itemno) {\n                itemno.textContent = index + 1; // Update the section number in the 'left' part.\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (!currentitem) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"names":["TopcollComponent","Component","create","descriptor","target","selectors","sectionReturn","element","document","getElementById","reactive","stateReady","_indexContents","this","supportComponents","isEditing","TopcollDispatchActions","classList","add","classes","STATEDREADY","addEventListener","CourseEvents","manualCompletionToggled","_completionHandler","_scrollHandler","getWatchers","watch","handler","_reloadCm","_refreshCmName","_refreshSectionNumber","_refreshSectionTitle","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","_reloadSection","state","sectionlist","getExporter","listedSectionIds","listparent","getElement","COURSE_SECTIONLIST","createSection","_createSectionItem","bind","_fixTopcollSectionOrder","SECTION","dettachedSections","container","neworder","selector","dettachedelements","createMethod","undefined","length","innerHTML","dndFakeActivity","remove","forEach","itemid","index","item","itemno","textContent","currentitem","children","insertBefore","append","lastchild","lastChild","_lastchild$classList","contains","dataset","_lastchild$dataset","id","removeChild"],"mappings":";;;;;;;;;u1BA8BqBA,yBAAyBC,iBAO1CC,OAAOC,kBACGD,OAAOC,wBAWLC,OAAQC,UAAWC,sBACpB,IAAIN,iBAAiB,CACxBO,QAASC,SAASC,eAAeL,QACjCM,UAAU,0CACVL,UAAAA,UACAC,cAAAA,gBAORK,kBACSC,iBAEDC,KAAKH,SAASI,oBAEVD,KAAKH,SAASK,eACVC,iBAAuBH,WAI1BN,QAAQU,UAAUC,IAAIL,KAAKM,QAAQC,mBAIvCC,iBACDR,KAAKN,QACLe,aAAaC,wBACbV,KAAKW,yBAIJH,iBACDb,SACA,SACAK,KAAKY,gBASbC,0BAGShB,SAASJ,cAAgBO,KAAKP,cAG9BO,KAAKH,SAASI,kBAGZ,CAEH,CAACa,2BAA6BC,QAASf,KAAKgB,WAC5C,CAACF,2BAA6BC,QAASf,KAAKgB,WAC5C,CAACF,6BAA+BC,QAASf,KAAKgB,WAC9C,CAACF,0BAA4BC,QAASf,KAAKgB,WAC3C,CAACF,6BAA+BC,QAASf,KAAKgB,WAC9C,CAACF,wBAA0BC,QAASf,KAAKiB,gBAEzC,CAACH,+BAAiCC,QAASf,KAAKkB,uBAChD,CAACJ,8BAAgCC,QAASf,KAAKmB,sBAE/C,CAACL,0BAA4BC,QAASf,KAAKoB,kBAC3C,CAACN,mCAAqCC,QAASf,KAAKqB,2BACpD,CAACP,+BAAiCC,QAASf,KAAKsB,uBAEhD,CAACR,gCAAkCC,QAASf,KAAKuB,gBAEjD,CAACT,sBAAwBC,QAASf,KAAKD,iBApBhC,GA8BfsB,oCAA0BG,MAACA,eAEa,OAAhCxB,KAAKH,SAASJ,2BAGZgC,YAAczB,KAAKH,SAAS6B,cAAcC,iBAAiBH,OAC3DI,WAAa5B,KAAK6B,WAAW7B,KAAKR,UAAUsC,oBAE5CC,cAAgB/B,KAAKgC,mBAAmBC,KAAKjC,MAC/C4B,iBACKM,wBAAwBN,WAAYH,YAAazB,KAAKR,UAAU2C,QAASnC,KAAKoC,kBAAmBL,6CAahFM,UAAWC,SAAUC,SAAUC,kBAAmBC,sBAC1DC,IAAdL,qBAKCC,SAASK,cACVN,UAAUjC,UAAUC,IAAI,eACxBgC,UAAUO,UAAY,QA8BtBC,oBAzBJR,UAAUjC,UAAU0C,OAAO,UAG3BR,SAASS,SAAQ,CAACC,OAAQC,wCAClBC,4CAAOlD,KAAK6B,WAAWU,SAAUS,qDAAWR,kBAAkBQ,+BAAWP,aAAaJ,UAAWW,YAChGE,gBAIDC,OAASnD,KAAK6B,WAAW,WAAWmB,QACpCG,SACAA,OAAOC,YAAcH,MAAQ,SAG3BI,YAAchB,UAAUiB,SAASL,OAClCI,YAIDA,cAAgBH,MAChBb,UAAUkB,aAAaL,KAAMG,aAJ7BhB,UAAUmB,OAAON,SAYlBb,UAAUiB,SAASX,OAASL,SAASK,QAAQ,gCAC1Cc,UAAYpB,UAAUqB,0DACxBD,MAAAA,wCAAAA,UAAWrD,2CAAXuD,qBAAsBC,SAAS,qBAC/Bf,gBAAkBY,eAElBjB,gDAAkBiB,MAAAA,sCAAAA,UAAWI,6CAAXC,mBAAoBC,0DAAM,GAAKN,UAErDpB,UAAU2B,YAAYP,WAGtBZ,iBACAR,UAAUmB,OAAOX"}