{"version":3,"file":"mindmap-vis.min.js","sources":["../src/mindmap-vis.js"],"sourcesContent":["define(['jquery', 'mod_mindmap/mindmap'],\r\n    function ($, Mindmap) {\r\n        return {\r\n            Init: function (mindmapid, locked, lang, strings, mindmapmode, mindmapindividualid) {\r\n                var mindmapdata;\r\n                $.ajax({\r\n                    async: false,\r\n                    url: \"mindmapdata.php?id=\" + (mindmapindividualid ? mindmapindividualid : mindmapid)\r\n                        + (mindmapmode ? \"&mindmapmode=\"+mindmapmode : \"\"),\r\n                    success: function (result) {\r\n                        mindmapdata = result; // Load mindmap data.\r\n                    }\r\n                });\r\n\r\n                // Languages support.\r\n                var local_locales = {\r\n                    custom: {\r\n                        edit: strings.visjsedit,\r\n                        del: strings.visjsdel,\r\n                        back: strings.visjsback,\r\n                        addNode: strings.visjsaddnode,\r\n                        addEdge: strings.visjsaddedge,\r\n                        editNode: strings.visjseditnode,\r\n                        editEdge: strings.visjseditedge,\r\n                        addDescription: strings.visjsadddescription,\r\n                        edgeDescription: strings.visjsedgedescription,\r\n                        editEdgeDescription: strings.visjseditedgedescription,\r\n                        createEdgeError: strings.visjscreateedgeerror,\r\n                        deleteClusterError: strings.visjsdeleteclustererror,\r\n                        editClusterError: strings.visjseditclustererror\r\n                    }\r\n                };\r\n\r\n                var nodes = [\r\n                    {\r\n                        id: \"moodle\",\r\n                        label: \"Moodle\",\r\n                        x: 400,\r\n                        y: 370,\r\n                        font: {\r\n                            color: '#ffffff',\r\n                            size: 18,\r\n                        },\r\n                        color: {\r\n                            background: '#ff0000',\r\n                        },\r\n                        widthConstraint: {maximum: 300},\r\n                        margin: 10,\r\n                        borderWidth: 1,\r\n                        shape: 'box',\r\n                        labelHighlightBold: false\r\n                    }\r\n                ];\r\n                var edges = [];\r\n                var network = null;\r\n\r\n                var inputValue = mindmapdata;\r\n                if (inputValue.length > 0) {\r\n                    var inputData = JSON.parse(inputValue);\r\n                    var data = {\r\n                        nodes: getNodeData(inputData),\r\n                        edges: getEdgeData(inputData)\r\n                    }\r\n                } else {\r\n                    var data = {\r\n                        nodes: nodes,\r\n                        edges: edges\r\n                    };\r\n                }\r\n\r\n                function clearPopUp() {\r\n                    document.getElementById(\"savebutton\").onclick = null;\r\n                    document.getElementById(\"cancelbutton\").onclick = null;\r\n                    document.getElementById(\"network-popup\").style.display = \"none\";\r\n                }\r\n\r\n                function cancelEdit(callback) {\r\n                    clearPopUp();\r\n                    callback(null);\r\n                }\r\n\r\n                function saveData(data, callback) {\r\n                    data.id = document.getElementById(\"node-id\").value;\r\n                    data.label = document.getElementById(\"node-label\").value;\r\n                    data.shape = document.getElementById(\"node-shape\").value;\r\n                    data.font.color = document.getElementById(\"node-font-color\").value;\r\n                    data.color.background = document.getElementById(\"node-color-background\").value;\r\n                    clearPopUp();\r\n                    callback(data);\r\n                }\r\n\r\n                function getNodeData(data) {\r\n                    var networkNodes = [];\r\n\r\n                    data.forEach(function (elem, index, array) {\r\n                        networkNodes.push({\r\n                            id: elem.id,\r\n                            label: elem.label,\r\n                            shape: (elem.hasOwnProperty('shape') ? elem.shape : 'box'),\r\n                            x: elem.x,\r\n                            y: elem.y,\r\n                            font: {\r\n                                color: (elem.hasOwnProperty('font') ? elem.font.color : '#343434')\r\n                            },\r\n                            color: {\r\n                                background: (elem.hasOwnProperty('color') ? elem.color.background : '#97c1fc')\r\n                            },\r\n                            widthConstraint: {maximum: 300},\r\n                            margin: 10\r\n                        });\r\n                    });\r\n\r\n                    return new vis.DataSet(networkNodes);\r\n                }\r\n\r\n                function getNodeById(data, id) {\r\n                    for (var n = 0; n < data.length; n++) {\r\n                        if (data[n].id == id) {  // double equals since id can be numeric or string\r\n                            return data[n];\r\n                        }\r\n                    }\r\n                    ;\r\n\r\n                    throw 'Can not find id \\'' + id + '\\' in data';\r\n                }\r\n\r\n                function getEdgeData(data) {\r\n                    var networkEdges = [];\r\n                    data.forEach(function (node) {\r\n                        // add the connection\r\n                        node.connections.forEach(function (connId, cIndex, conns) {\r\n                            networkEdges.push({from: node.id, to: connId, width: 2});\r\n                            var cNode = getNodeById(data, connId);\r\n\r\n                            var elementConnections = cNode.connections;\r\n\r\n                            // remove the connection from the other node to prevent duplicate connections\r\n                            var duplicateIndex = elementConnections.filter(function (connection) {\r\n                                return connection == node.id; // double equals since id can be numeric or string\r\n                            })[0];\r\n\r\n\r\n                            if (duplicateIndex != -1) {\r\n                                elementConnections.splice(duplicateIndex, 1);\r\n                            }\r\n                            ;\r\n                        });\r\n                    });\r\n\r\n                    return new vis.DataSet(networkEdges);\r\n                }\r\n\r\n                function objectToArray(obj) {\r\n\r\n                    return Object.keys(obj).map(function (key) {\r\n                        obj[key].id = key;\r\n                        return obj[key];\r\n                    });\r\n                }\r\n\r\n                function addConnections(elem, index) {\r\n                    // need to replace this with a tree of the network, then get child direct children of the element\r\n                    elem.connections = network.getConnectedNodes(elem.id);\r\n                }\r\n\r\n                function addNodeProperties(elem, index) {\r\n                    elem.label = network.body.nodes[elem.id].options.label;\r\n                    if (network.body.nodes[elem.id].options.hasOwnProperty('shape')) {\r\n                        elem.shape = network.body.nodes[elem.id].options.shape;\r\n                    }\r\n                    if (network.body.nodes[elem.id].options.font.hasOwnProperty('color')) {\r\n                        elem.font = {};\r\n                        elem.font.color = network.body.nodes[elem.id].options.font.color;\r\n                    }\r\n                    if (network.body.nodes[elem.id].options.color.hasOwnProperty('background')) {\r\n                        elem.color = {};\r\n                        elem.color.background = network.body.nodes[elem.id].options.color.background;\r\n                    }\r\n                }\r\n\r\n                function exportNetwork() {\r\n                    var nodes = objectToArray(network.getPositions());\r\n                    nodes.forEach(addNodeProperties);\r\n                    nodes.forEach(addConnections);\r\n\r\n                    // pretty print node data\r\n                    var exportValue = JSON.stringify(nodes, undefined, 2);\r\n                    var ajax = new Mindmap();\r\n                    ajax.mindmapsubmit((mindmapindividualid ? mindmapindividualid : mindmapid), exportValue, mindmapmode);\r\n                    //console.log(exportValue);\r\n                }\r\n\r\n                // create a network\r\n                var container = document.querySelector('.network');\r\n                var options = {};\r\n\r\n                // IF editing enabled and no lock active..\r\n                if (locked == 0) {\r\n                    options = {\r\n                        manipulation: {\r\n                            initiallyActive: true,\r\n                            addNode: function (data, callback) {\r\n                                // filling in the popup DOM elements\r\n                                document.getElementById(\"operation\").innerHTML = strings.visjsaddnode;\r\n                                document.getElementById(\"node-id\").value = data.id;\r\n                                document.getElementById(\"node-label\").value = '';\r\n                                document.getElementById(\"node-font-color\").value = '#343434';\r\n                                document.getElementById(\"node-color-background\").value = '#97c1fc';\r\n                                document.getElementById(\"node-shape\").value = 'box';\r\n                                var newData = {\r\n                                    id: document.getElementById(\"node-id\").value,\r\n                                    x: data.x,\r\n                                    y: data.y,\r\n                                    label: document.getElementById(\"node-label\").value,\r\n                                    shape: document.getElementById(\"node-shape\").value,\r\n                                    font: {\r\n                                        color: document.getElementById(\"node-font-color\").value\r\n                                    },\r\n                                    color: {\r\n                                        background: document.getElementById(\"node-color-background\").value\r\n                                    }\r\n                                };\r\n                                document.getElementById(\"savebutton\").onclick = saveData.bind(\r\n                                    this,\r\n                                    newData,\r\n                                    callback\r\n                                );\r\n                                document.getElementById(\"cancelbutton\").onclick = clearPopUp.bind();\r\n                                document.getElementById(\"network-popup\").style.display = \"block\";\r\n                            },\r\n                            editNode: function (data, callback) {\r\n                                // filling in the popup DOM elements\r\n                                document.getElementById(\"operation\").innerHTML = strings.visjseditnode;\r\n                                document.getElementById(\"node-id\").value = data.id;\r\n                                document.getElementById(\"node-label\").value = data.label;\r\n                                document.getElementById(\"node-font-color\").value = (data.font.hasOwnProperty('color') ? data.font.color : '#343434');\r\n                                document.getElementById(\"node-color-background\").value = (data.color.hasOwnProperty('background') ? data.color.background : '#97c1fc');\r\n                                document.getElementById(\"node-shape\").value = (data.hasOwnProperty('shape') ? data.shape : 'box');\r\n                                document.getElementById(\"savebutton\").onclick = saveData.bind(\r\n                                    this,\r\n                                    data,\r\n                                    callback\r\n                                );\r\n                                document.getElementById(\"cancelbutton\").onclick = cancelEdit.bind(\r\n                                    this,\r\n                                    callback\r\n                                );\r\n                                document.getElementById(\"network-popup\").style.display = \"block\";\r\n                            },\r\n                            addEdge: function (data, callback) {\r\n                                if (data.from == data.to) {\r\n                                    var r = confirm(\"Do you want to connect the node to itself?\");\r\n                                    if (r == true) {\r\n                                        callback(data);\r\n                                    }\r\n                                } else {\r\n                                    callback(data);\r\n                                }\r\n                            },\r\n                        },\r\n                        physics: {\r\n                            enabled: false,\r\n                        },\r\n                        edges: {\r\n                            physics: false,\r\n                            dashes: false,\r\n                            smooth: {\r\n                                enabled: false,\r\n                            },\r\n                            width: 2,\r\n                        },\r\n                        nodes: {\r\n                            borderWidth: 1,\r\n                            shape: 'box',\r\n                            widthConstraint: {maximum: 300},\r\n                            margin: 10,\r\n                            font: {\r\n                                size: 18,\r\n                            },\r\n                            labelHighlightBold: false\r\n                        },\r\n                    };\r\n\r\n                    $('#export_button').on('click', function () {\r\n                        exportNetwork();\r\n                    });\r\n                } else {\r\n                    options = {\r\n                        physics: {\r\n                            enabled: false,\r\n                        },\r\n                        edges: {\r\n                            physics: false,\r\n                            dashes: false,\r\n                            smooth: {\r\n                                enabled: false,\r\n                            },\r\n                            width: 2,\r\n                        },\r\n                        nodes: {\r\n                            borderWidth: 1,\r\n                            shape: 'box',\r\n                            widthConstraint: {maximum: 300},\r\n                            margin: 10,\r\n                            font: {\r\n                                size: 18,\r\n                            },\r\n                            labelHighlightBold: false\r\n                        }\r\n                    };\r\n                }\r\n\r\n                options['locales'] = local_locales;\r\n                options['locale'] = 'custom';\r\n\r\n                network = new vis.Network(container, data, options);\r\n\r\n                //NetWork on Zoom\r\n                network.on(\"zoom\", function() {\r\n                    pos = [];\r\n                    pos = network.getViewPosition();\r\n                    if(network.getScale() <= 0.49 ) {\r\n                        network.moveTo({\r\n                            position: {x:pos.x, y:pos.y},\r\n                            scale: 0.49,\r\n                        });\r\n                    }\r\n                    if(network.getScale() >= 5.49 ) {\r\n                        network.moveTo({\r\n                            position: {x:pos.x, y:pos.y},\r\n                            scale: 5.49,\r\n                        });\r\n                    }\r\n                });\r\n                // Reset zoom\r\n                $('.resetzoom').on('click', function () {\r\n                    network.fit();\r\n                });\r\n\r\n                if (locked == 0) {\r\n                    network.on(\"doubleClick\", function (params) {\r\n                        if ((params.edges.length >= 0) && (params.nodes.length > 0)) {\r\n                            network.editNode();\r\n                        } else if ((params.edges.length > 0) && (params.nodes.length == 0)) {\r\n                            network.editEdgeMode();\r\n                        } else if ((params.edges.length == 0) && (params.nodes.length == 0)) {\r\n                            network.addEdgeMode();\r\n                        }\r\n                    });\r\n                    $('html').keyup(function(e) {\r\n                        if (e.key == 'Insert') {\r\n                            network.addNodeMode();\r\n                        }\r\n                        if (e.key == 'Delete') {\r\n                            network.deleteSelected();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        };\r\n    });\r\n"],"names":["define","$","Mindmap","Init","mindmapid","locked","lang","strings","mindmapmode","mindmapindividualid","mindmapdata","ajax","async","url","success","result","local_locales","custom","edit","visjsedit","del","visjsdel","back","visjsback","addNode","visjsaddnode","addEdge","visjsaddedge","editNode","visjseditnode","editEdge","visjseditedge","addDescription","visjsadddescription","edgeDescription","visjsedgedescription","editEdgeDescription","visjseditedgedescription","createEdgeError","visjscreateedgeerror","deleteClusterError","visjsdeleteclustererror","editClusterError","visjseditclustererror","network","inputValue","length","inputData","JSON","parse","data","nodes","networkNodes","forEach","elem","index","array","push","id","label","shape","hasOwnProperty","x","y","font","color","background","widthConstraint","maximum","margin","vis","DataSet","getNodeData","edges","networkEdges","node","connections","connId","cIndex","conns","from","to","width","cNode","n","getNodeById","elementConnections","duplicateIndex","filter","connection","splice","getEdgeData","size","borderWidth","labelHighlightBold","clearPopUp","document","getElementById","onclick","style","display","cancelEdit","callback","saveData","value","addConnections","getConnectedNodes","addNodeProperties","body","options","exportNetwork","obj","getPositions","Object","keys","map","key","exportValue","stringify","undefined","mindmapsubmit","container","querySelector","manipulation","initiallyActive","innerHTML","newData","bind","this","confirm","physics","enabled","dashes","smooth","on","Network","pos","getViewPosition","getScale","moveTo","position","scale","fit","params","editEdgeMode","addEdgeMode","keyup","e","addNodeMode","deleteSelected"],"mappings":"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"}