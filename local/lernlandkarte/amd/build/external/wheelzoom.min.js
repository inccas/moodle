define('wheelzoom', [], function() {
    "use strict";

    var defaults = {
        zoom: .1,
        maxZoom: !1,
        initialZoom: 1,
        initialX: .5,
        initialY: .5
    };

    function main(img, options) {
        if (img && img.nodeName && "IMG" === img.nodeName) {
            var currentZoom, originalSize, imageSize, container, imageOffset, backgrounds, wheeling, previousEvent, cssBackup = {
                backgroundImage: img.style.backgroundImage,
                backgroundRepeat: img.style.backgroundRepeat,
                src: img.src
            };

            function cleanup() {
                img.removeEventListener("wheelzoom.destroy", cleanup),
                    img.removeEventListener("wheelzoom.reset", reset),
                    img.removeEventListener("load", onImageLoaded),
                    img.removeEventListener("mouseup", onMouseUp),
                    img.removeEventListener("mousemove", onMouseMove),
                    img.removeEventListener("mousedown", onMouseDown),
                    img.removeEventListener("wheel", onWheel),
                    img.style.backgroundImage = cssBackup.backgroundImage,
                    img.style.backgroundRepeat = cssBackup.backgroundRepeat,
                    img.src = cssBackup.src
            }

            function updateData() {
                var x = (.5 * originalSize.width - container.left) / imageSize.width * 100,
                    y = (.5 * originalSize.height - container.top) / imageSize.height * 100,
                    zoom = imageSize.width / originalSize.width * 100;
                img.dispatchEvent(new CustomEvent("wheelzoom.data", {
                    bubbles: !0,
                    detail: {
                        x: x.toFixed(1),
                        y: y.toFixed(1),
                        zoom: zoom.toFixed(0)
                    }
                }))
            }

            function updateBgStyle() {
                container.left > 0 ? container.left = 0 : container.left < originalSize.width - imageSize.width && (container.left = originalSize.width - imageSize.width),
                    container.top > 0 ? container.top = 0 : container.top < originalSize.height - imageSize.height && (container.top = originalSize.height - imageSize.height),
                    img.style.backgroundSize = imageSize.width + "px " + imageSize.height + "px",
                    img.style.backgroundPosition = container.left + "px " + container.top + "px",
                    updateData()
            }

            function reset() {
                imageSize.width = originalSize.width,
                    imageSize.height = originalSize.height,
                    container.left = container.top = 0,
                    updateBgStyle()
            }

            function onWheel(e) {
                var deltaY = 0;
                e.preventDefault(),
                    e.deltaY ? deltaY = e.deltaY : e.wheelDelta && (deltaY = -e.wheelDelta);
                var rect = img.getBoundingClientRect(),
                    clientX = e.pageX - rect.left - window.pageXOffset,
                    clientY = e.pageY - rect.top - window.pageYOffset,
                    bgPosX = (clientX - container.left) / imageSize.width,
                    bgPosY = (clientY - container.top) / imageSize.height;
                deltaY < 0 ? (imageSize.width += imageSize.width * options.zoom,
                    imageSize.height += imageSize.height * options.zoom) : (imageSize.width -= imageSize.width * options.zoom,
                    imageSize.height -= imageSize.height * options.zoom),
                options.maxZoom && (imageSize.width = Math.min(originalSize.width * options.maxZoom, imageSize.width),
                    imageSize.height = Math.min(originalSize.height * options.maxZoom, imageSize.height)),
                    container.left = clientX - imageSize.width * bgPosX,
                    container.top = clientY - imageSize.height * bgPosY,
                    imageSize.width <= originalSize.width || imageSize.height <= originalSize.height ? reset() : updateBgStyle()
            }

            function onMouseMove(e) {
                e.preventDefault(),
                    container.left += e.pageX - previousEvent.pageX,
                    container.top += e.pageY - previousEvent.pageY,
                    previousEvent = e,
                    updateBgStyle()
            }

            function onMouseUp() {
                document.removeEventListener("mouseup", onMouseUp),
                    document.removeEventListener("mousemove", onMouseMove)
            }

            function onMouseDown(e) {
                e.preventDefault(),
                    previousEvent = e,
                    document.addEventListener("mousemove", onMouseMove),
                    document.addEventListener("mouseup", onMouseUp)
            }

            function onImageLoaded() {
                if (currentZoom = options.initialZoom,
                    options.initialZoom < 1 ? currentZoom = 1 : options.initialZoom > 20 && (currentZoom = 20),
                img.src !== backgrounds) {
                    var computedStyle = window.getComputedStyle(img, null);
                    originalSize = {
                        width: parseInt(computedStyle.width, 10),
                        height: parseInt(computedStyle.height, 10)
                    },
                        imageSize = {
                            width: originalSize.width * currentZoom,
                            height: originalSize.height * currentZoom
                        },
                        container = {
                            left: .5 * originalSize.width - imageSize.width * options.initialX,
                            top: .5 * originalSize.height - imageSize.height * options.initialY
                        },
                        img.style.backgroundRepeat = "no-repeat",
                        img.style.backgroundImage = 'url("' + img.src + '")',
                        backgrounds = "data:image/svg+xml;base64," + window.btoa('<svg xmlns="http://www.w3.org/2000/svg" width="' + img.naturalWidth + '" height="' + img.naturalHeight + '"></svg>'),
                        img.src = backgrounds,
                        img.style.backgroundSize = imageSize.width + "px " + imageSize.height + "px",
                        img.style.backgroundPosition = container.left + "px " + container.top + "px",
                        updateData(),
                        img.addEventListener("wheelzoom.reset", reset),
                        img.addEventListener("wheel", onWheel),
                        img.addEventListener("mousedown", onMouseDown)
                }
            }

            img.addEventListener("wheelzoom.destroy", cleanup),
                options = options || {},
                Object.keys(defaults).forEach(function(key) {
                    options[key] = void 0 !== options[key] ? options[key] : defaults[key]
                }),
            img.complete && (onImageLoaded(),
                new ResizeObserver(function() {
                    var computedStyle = window.getComputedStyle(img, null);
                    originalSize = {
                        width: parseInt(computedStyle.width, 10),
                        height: parseInt(computedStyle.height, 10)
                    },
                        imageSize = {
                            width: originalSize.width * currentZoom,
                            height: originalSize.height * currentZoom
                        },
                        container = {
                            left: .5 * originalSize.width - imageSize.width * options.initialX,
                            top: .5 * originalSize.height - imageSize.height * options.initialY
                        },
                        img.style.backgroundSize = imageSize.width + "px " + imageSize.height + "px",
                        img.style.backgroundPosition = container.left + "px " + container.top + "px"
                }).observe(img)),
                img.addEventListener("load", onImageLoaded)
        }
    }

    var wheelzoom = function(target, options) {
        return "function" != typeof window.btoa ? target : (target && target.length ? Array.prototype.forEach.call(target, function(img) {
            main(img, options)
        }) : target && target.nodeName && main(target, options),
            target)
    };

    wheelzoom.defaults = defaults;

    return wheelzoom;
});